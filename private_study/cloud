
\1. 프로젝트(파일) 관리/브라우징

  \- 워크스페이스 제공

  \- 언어/프레임워크별 프로젝트 템플릿 제공

  \- 파일 업로드/다운로드

  \- 프로젝트 내보내기/가져오기 (파일 또는 링크 형태의 공유)



\2. 편집기(문법 검사, 코드 하이라이팅, 자동 완성 등)



\3. 자동 저장 및 리비전(SCM과는 별도로 파일 자체의 리비전 관리)



\4. 개발, 빌드 및 실행을 위한 VM이나 Container 제공



\5. 협업 기능

  \- 프로젝트 공유/프로젝트 멤버(팀) 관리

  \- IDE 내 메신저 채널 제공

  \- 동시 협업 코딩(구글 문서와 같은 동시 편집 기능)



\6. 웹 기반 SSH 터미널 제공(대부분 sudo 명령어 지원)



\7. 형상관리 시스템 연동(Git.Mercurial/SVN 또는 외부 서비스 e.g. Github)



\8. UI 사용자화(Custumizing)

  \- 창/탭 형태의 UX 제공

  \- 창/탭 분할

  \- 테마 사용자화







Codenvy의 주요 특징



  \- Docker 기반 컨테이너 제공

  \- 프로젝트 실행 시에만 컨테이너(Runner) 동작

   \- Runner가 동작중일 때 웹 SSH Terminal을 통해 접속가능

  \- 웹 UI를 통한 데이터베이스 연동

  \- 언어 지원 : C/C++, Javascript, Java, PHP, Python, Ruby

  \- 템플릿 프로젝트 제공

  \- 언어별 빌드툴에 대한 빌더 인터페이스 제공

  \- 형상관리 제공(Git, Subversion)



Codenvy를 통해 개발 시 소스코드 등의 프로젝트 파일은 서버의 파일 시스템으로만 관리되고, 테스트 시에는 Runner라는 실행환경을 제공합니다. Runner는 Docker를 통해 생성된 Container이며, 빌드 결과를 Runner에 업로드하여 Runner 환경 내에서 실행됩니다.

 

**SourceLair의 주요 특징**



  \- 형상관리 시스템에 밀접하게 연동

   \- 프로젝트 생성 시 형상관리 시스템을 먼저 선택하도록 되어있음

  \- UI 상에서 Package Management 제공

   \- npm, pip, bower 등

  \- 개발용 데이터베이스 인스턴스 제공

  \- Heroku 개발 특화

   \- Heroku 앱 템플릿 제공(Heroku 용 Node, Django)

  \- Linux 터미널 제공

  \- 웹 서비스의 Public URL 제공

  \- Sublime Text의 Command Palette와 유사한 기능 제공

  \- HTML 라이브 프리뷰



  편집 기능에 있어서 강력한 기능을 많이 제공합니다. HTML 의 라이브 프리뷰도 그렇고, 자동 완성, 코드 폴딩 등의 기능을 제공합니다. 웹에서 웬만한 IDE의 편집기에 버금가는 기능

  특이한 부분은 <u>웹 UI 내에서 npm, pip와 같은 패키지 관리를 할 수 있단 부분</u>인데요. 물론 다른 웹 IDE 들도 터미널을 통해 할 수 있지만 UI를 통해서 할 수 있는 건 SourceLair 밖에 없어 보입니다.





**Koding 의 주요 특징**



  \- VM 기반 워크스페이스 제공 : VM에 대한 Public IP 제공

  \- 편집기 위주의 화면 구성

  \- 빌드, 테스트 등은 터미널을 통해 명령어/스크립트로 수행

  \- 그림판(Drawing Board) 편집기 제공

  \- 메신저(개인 Direct Message / 채널)

   \- 채널의 경우 공개되어 있으며, 다른 사용자들과 의견 공유 가능

  \- VM 관리

   \- VM Spec, Disk Usage, Domain, VM Share, Snapshot 등 IaaS 주요 VM 관리 기능 제공

   \- 외부 서비스의 VM 사용 가능 - 해당 VM에서 셋업 스크립트 실행을 통해 초기화



<u>Koding의 경우 다른 서비스들과 달리 Koding을 위한 개발환경이 세팅된 VM을 통째로 제공해 줍니다. VM안의 파일 시스템을 사용하고 언어, 프레임워크, 데이터베이스 등을 설치하여 사용할 수 있습니다. 가장 자유도가 높은 웹 IDE</u> 입니다.



또한 사용하는 IaaS가 있다면 그곳의 VM에 셋업 스크립트를 실행해서 Koding 에서 사용할 수 있도록 설정할 수 있습니다.





**codeanywhere 의 주요 특징**



  \- 컨테이너, FTP/SFTP/SSH, Git, 스토리지 서비스로부터 프로젝트를 생성/파일 관리

   \- 자체 제공 컨테이너 : 언어 및 프레임워크별 이미지 제공

   \- Github/Bitbucket 연동 또는 Git URL 직접 입력

   \- 3rd 파티 스토리지 서비스 : 아마존 S3, Dropbox. Google Drive

  \- 프로젝트 템플릿은 제공하지 않음

  \- 컨테이너의 언어(프레임워크) 스택에 따라 웹 서버 실행

  \- 스택에 필요한 패키지 설치 후 커스텀 스택으로 저장 할 수 있음

  \- 다른 사용자에게 프로젝트 공유 기능 지원

  \- 프로젝트/컨테이너 등의 설정은 JSON 형식의 설정 파일을 직접 수정



  Codeanywhere은 프로젝트 생성 시 '연결'한다는 개념으로 접근합니다. 컨테이너에 연결, GitHub에 연결, SSH 서버에 연결.. 등 파일 시스템을 사용할 수 있는 시스템을 기반으로 하여 개발을 할 수 있도록 해두었습니다. 다만 컨테이너 이 외에는 통합 개발 환경을 제공하기 보다는 웹을 통한 파일 관리의 느낌이 더 드는..?

  컨테이너의 경우에는 '스택'이라는 개념으로 언어나 프레임워크 등을 관리할 수 있도록 되어있고, 개발자가 원하는 패키지를 설치한 후 커스텀 스택으로 저장하여 사용할 수 있습니다.







**Cloud9 의 주요 특징**



  \- 컨테이너 기반 개발 환경 제공

  \- REPL(Javascript) 제공

  \- WAS의 로그 콘솔 제공

  \- 로컬 IDE와 유사한 수준의 디버깅 기능 제공

  \- 컨테이너 리소스 모니터링 및 프로세스 관리 가능

  \- HTML 페이지, 마크다운, 이미지 파일 등의 프리뷰 지원



Cloud9은 개인적으로 이름이 마음에 드는 서비스입니다. 이름이 갖는 의미 만큼의 개발 환경을 제공해 줄 수 있을지는 더 지켜봐야겠지만요..? (오래오래...?)

SourceLair의 경우에는 웹 UI 상에서 패키지 관리를 제공했다면, Cloud9은 컨테이너의 메모리, 디스크와 같은 리소스와 컨테이너에서 실행 중인 프로세스를 관리할 수 있는 기능을 제공합니다.







**구름IDE의 주요 특징**



  \- 국내에서 개발된 웹 IDE

  \- 컨테이너(Amazon EC2 Container) 기반 워크스페이스 제공

   \- *.goorm.io / *.compute.amazonaws.com Public URL 제공

  \- Java 교육용 컨텐츠(예제 및 템플릿) 제공

  \- 로컬 IDE와 유사한 수준의 디버깅 기능 제공

  \- Git/Subversion 연동 (다소 불안정)

  \- 문서 뷰어 제공(Slideshare.net, PDF 파일)

  \- 작업 내역(리비전) 기록 및 해당 리비전에 대한 작업 내역 재생 가능





  구름 IDE 는 국내에서 개발된 웹 IDE입니다. 해외의 주요 웹 IDE에 비해서는 아직 안정성이나 기능적인 면에서 조금 부족한 모습이 보입니다. Git이나 Subversion과 같은 버전 관리 시스템과의 연동은 불안정한 부분이 있구요.(연결이 되기도 했다가 안되었다가..)

  전반적인 기능으로 봤을 때는 실제 개발을 위한 IDE라기 보다는 교육용에 가까운 모습입니다. 프로젝트 생성 시 자바의 문법이나 특정 API와 관련된 샘플 템플릿을 제공한다거나, IDE 편집 화면 내에서 Slideshare.net의 링크나 컨테이너에 업로드한 PDF 파일을 볼 수 있는 뷰어를 제공합니다.





주요 오픈소스 웹 IDE



\- Eclipse Che

\- Eclipse Orion

**Eclipse Che - http://www.eclipse/che**





Eclipse Che 프로젝트는 상용 서비스인 Codenvy에서 이클립스 재단에 기여한 프로젝트입니다.

Codenvy의 UI를 포함하여 대부분의 기능을 제공하고 있습니다.



그러므로 Eclipse Che에 대한 설명은 생략하겠습니다. (...?)









 **Eclipse Orion -** **https://orionhub.org/**





오리온의 주요 특징은 아래와 같습니다. 

  \- CloudFoundry와 연동 제공

  \- 기본적인 수준의 편집 기능 제공

  \- 외부 Git 서비스 연동

  \- Shell 제공 (지정된 명령어만 사용 가능, 일반적인 터미널과 다름)

  \- Public URL 제공

  \- manifest.yml 편집 및 유효성 검사 기능 제공



manifest.yml 파일은 CloudFoundry에서 사용하는 애플리케이션의 설정 파일이며, 애플리케이션의 자원(메모리, 디스크), 서비스, 애플리케이션 속성 등을 관리하는 파일입니다.

Eclipse Orion 에서는 manifest.yml 파일을 직접 이용하여 애플리케이션에 대한 설정을 할 수 있도록 되어있으며, 편집기 자체에서 매니페스트 파일의 유효성을 검사합니다. 즉 CloudFoundry에 최적화된 모습을 보입니다. 컬러 테마 역시 CF와 같아 보이는군요. Pivotal 쪽과 관계가 있지 않을까 추측해 봅니다.





-Eclipse Dirigible

**Eclipse Dirigible - [http://www.dirigible.io](http://www.dirigible.io/)**





Eclipse Dirigible의 주요 특징은 아래와 같습니다.

  \- SAP에서 이클립스 재단에 기여

  \- Perspective를 통한 화면 구성

   \- Database, Debug, Generic, Registry, Repository, Workspace, Help

  \- Sandbox를 통한 호스팅 제공

  \- 데이터베이스 스키마 편집 모드(Perspective) 제공

  \- Plugin Lazy Load

  \- UI 구성이 일반적인 IDE와 차이가 있어서 러닝 커브가 있음



IDE로써의 다양한 기능을 제공합니다. 특히 <u>데이터베이스 스키마 편집을 위한 Database 퍼스펙티브와 사용자들이 개발한 프로젝트를 등록하여 공유할 수 있는 Registry를 제공합니다.</u> 이 두 가지 관점에서는 다른 IDE보다 우수

다만 ***Plugin Lazy Load 때문에 체감 속도는 더 느림. (매번 로딩...) 또한 전반적으로 UI 반응성이 떨어져서 사용성이 떨어지는 느낌입니다.*** 



\- Eclipse Flux

\- Codebox

\- Codiad



위 목록에서 보다시피 Eclipse가 붙은 프로젝트가 네 가지가 있습니다. 이름대로 이클립스 재단에서 클라우드 환경에 맞는 IDE 개발을 위해 진행중인 ECD(Eclipse Cloud Development)에 포함된 네 개의 프로젝트입니다. 



http://www.eclipse.org/ecd 에 접속해 보시면 위 네 개의 프로젝트에 대한 소개와 링크를 제공합니다.

~~**Codebox - [http://www.codebox.io](http://www.dirigible.io/)**~~

~~Codebox는 분석 전에 스크린샷이나 소개 글로 봤을 땐 개인적으로 괜찮아 보였는데... 테스트 서버에 회원가입 제한이 되어있더군요. (분석할 때는 작년 말이었는데, 지금도 보니 회원가입은 비활성화 되어있네요)~~



~~간략하게 특징을 살펴보면~~

  ~~\- Node.js 기반의 Apache 라이선스로 개발~~

  ~~\- Java, Python, Ruby, Go 등의 언어 지원~~



~~마지막 커밋이 글을 쓰는 현재(`16. 3. 31) 11개월 전인 것으로 보아~~ 개발이 중지



웹 IDE를 통해서 개발 시 소스코드나 리소스 등의 파일은 서버에 위치해 있고, 필요 시 로컬로부터 업로드하여 사용합니다. 물론 컴파일(빌드), 테스트, 배포 등의 작업 역시 서버 내에서 이루어집니다.



  화면으로 제공되는 것 이외에는 모든 작업이 서버에서 이루어지지만, 서버나 VM/Container에서 사용할 수 있는 기능이 모두 UI로 제공되지는 않습니다. 그걸 다 제공한다면 UI는 너무 복잡해 지겠지요.



이런 제한점을 해소할 수 있는 것은 웹 기반 SSH 터미널을 통해 필요한 것을 설치하거나 사용할 수 있습니다. 물론 SSH를 제공하지 않으면 UI로 제공하는 기능이 기능이자 제약이 되기도 합니다.





  속도 면에서는 서비스가 지원하는 성능 또는 과금 모델에 따라 속도 차이가 날 수 있으며, 인터페이스 및 편집기 기능을 제공하는 웹 브라우저에서는 일반적인 로컬 IDE보다는  속도가 느립니다.

네이티브 앱과 하이브리드 앱(또는 웹 앱)에서의 속도차이와 같은 개념으로 볼 수 있겠네요. 현재는 웹 IDE를 기반으로 실제 운영을 위한 서비스를 개발하라고 하면 당연히 무리가 있겠지만 속도, 기술, 기능 등의 면은 시간이 흐를 수록 발전되고 더 나은 사용자 경험을 제공할 수 있다고 봅니다.



  또한 웹 IDE는 클라우드 개발환경이 IaaS에서 PaaS로 점차 넘어가는 환경에서 이에 걸맞은 개발환경이 될 수 있다고 생각하기 때문에 PaaS와 웹 IDE는 유사한 수준으로 함께 발전



